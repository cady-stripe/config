let mapleader = ' '
inoremap jk <Esc>
inoremap kj <Esc>

nnoremap <C-a> ^
nnoremap <Home> ^
nnoremap <C-e> $
nnoremap <End> $
inoremap <C-a> <C-o>^
inoremap <Home> <C-o>^
inoremap <C-e> <Esc>$a
inoremap <End> <Esc>$a
vnoremap <C-a> ^
vnoremap <Home> ^
vnoremap <C-e> $
vnoremap <End> $
noremap <C-z> <C-a>

nnoremap w l[bv]w
vnoremap w ]w

nnoremap W viw
vnoremap W e

vnoremap P pgvy
nnoremap <Right> *
nnoremap <Left> #
nnoremap <Up> 3<c-y>
nnoremap <Down> 3<c-e>
vnoremap <Up> 3k
vnoremap <Down> 3j
nnoremap <C-l> *
nnoremap <C-h> #
nnoremap <C-k> 3<c-y>
nnoremap <C-j> 3<c-e>
vnoremap <C-k> 3k
vnoremap <C-j> 3j
inoremap <C-l> <Right>
inoremap <C-h> <Left>
inoremap <C-k> <Up>
inoremap <C-j> <Down>
inoremap <C-w> <C-o><C-w>
nnoremap M bimock<Esc>l~
nnoremap s :action CommentByLineComment<CR>
nnoremap J :action EditorJoinLines<CR>
nnoremap R :action RenameElement<CR>
nnoremap t :action ToggleLineBreakpoint<CR>
nnoremap Q :action com.andrewbrookins.idea.wrap.WrapAction<CR>
nnoremap T :action StringManipulation.AlignToColumns<CR>
nnoremap Y :action IntroduceVariable<CR>
vnoremap Y :action IntroduceVariable<CR>
vnoremap Q :<Backspace><Backspace><Backspace><Backspace><Backspace>action com.andrewbrookins.idea.wrap.WrapAction<CR>
inoremap <M-h> <C-w>h
vnoremap <M-h> <C-w>h
nnoremap <M-h> <C-w>h
cnoremap <M-h> <C-w>h
inoremap <M-l> <C-w>l
vnoremap <M-l> <C-w>l
nnoremap <M-l> <C-w>l
cnoremap <M-l> <C-w>l
nnoremap , :action GotoPreviousError<CR>
nnoremap . :action GotoNextError<CR>
nnoremap U :action Vcs.RollbackChangedLines<CR>
nnoremap <CR> :action ShowErrorDescription<CR>
" nnoremap C :action Blaze.OpenInCodeSearch<CR>
" nnoremap D :action Blaze.FixDepsForFile<CR>
" nnoremap B :action Blaze.OpenCorrespondingBuildFile<CR>
" nnoremap S :action Blaze.PartialSync<CR>
nnoremap <S-Left> :action MoveElementLeft<CR>
nnoremap <S-Right> :action MoveElementRight<CR>
nnoremap D :action GotoTypeDeclaration<CR>

vnoremap . :<Backspace><Backspace><Backspace><Backspace><Backspace>action StringManipulation.ToDotStyleAction<CR>
vnoremap - :<Backspace><Backspace><Backspace><Backspace><Backspace>action StringManipulation.ToHyphenCaseOrCamelCase<CR>
nnoremap - :action StringManipulation.ToHyphenCaseOrCamelCase<CR>
vnoremap C :<Backspace><Backspace><Backspace><Backspace><Backspace>action StringManipulation.ToPascalCaseOrCamelCase<CR>
vnoremap _ :<Backspace><Backspace><Backspace><Backspace><Backspace>action StringManipulation.ToSnakeCaseOrCamelCase<CR>
nnoremap _ :action StringManipulation.ToSnakeCaseOrCamelCase<CR>
nnoremap <S-Up> :action MoveStatementUp<CR>
nnoremap <S-Down> :action MoveStatementDown<CR>
inoremap <S-Up> <C-o>:action MoveStatementUp<CR>
inoremap <S-Down> <C-o>:action MoveStatementDown<CR>
vnoremap ` va`<Esc>gvovi`<Esc>f`
vnoremap ' va'<Esc>gvovi'<Esc>f'
vnoremap " va"<Esc>gvovi"<Esc>f"
vnoremap ( va)<Esc>gvovi(<Esc>
vnoremap ) va)<Esc>gvovi(<Esc>%
vnoremap [ va]<Esc>gvovi[<Esc>
vnoremap ] va]<Esc>gvovi[<Esc>%
vnoremap { va}<Esc>gvovi{<Esc>
vnoremap } va}<Esc>gvovi{<Esc>%
vnoremap < va><Esc>gvovi<<Esc>
vnoremap > va><Esc>gvovi<<Esc>%

nnoremap [ vi[
nnoremap ] va[
nnoremap { vi{
nnoremap } va{
nnoremap ( vi(
nnoremap ) va)
nnoremap < vi<
nnoremap > va<
nnoremap " vi"
nnoremap ' vi'
nnoremap ` F`lvt`
nnoremap X @q
vnoremap a <Esc>
vnoremap i <Esc>
nnoremap <space> :action RunToCursor<CR>
nnoremap <Backspace> :action QuickEvaluateExpression<CR>

set ignorecase
set smartcase
set number
set clipboard=unnamed
set timeoutlen=50
set incsearch
